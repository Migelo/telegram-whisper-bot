name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        # FFmpeg is required by OpenAI Whisper for audio processing

    - name: Create virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip

    - name: Install Python dependencies
      run: |
        source .venv/bin/activate
        pip install -r requirements.txt

    - name: Install test dependencies
      run: |
        source .venv/bin/activate
        pip install pytest pytest-asyncio pytest-mock pytest-cov hypothesis

    - name: Lint with ruff (if available)
      run: |
        source .venv/bin/activate
        pip install ruff || true
        if command -v ruff &> /dev/null; then
          ruff check . || echo "Ruff linting failed, continuing..."
        fi
      continue-on-error: true

    - name: Type check with mypy (if available)
      run: |
        source .venv/bin/activate
        pip install mypy || true
        if command -v mypy &> /dev/null; then
          mypy --ignore-missing-imports main.py bot_core.py || echo "MyPy check failed, continuing..."
        fi
      continue-on-error: true

    - name: Run tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/ -v --tb=short

    - name: Run tests with coverage
      run: |
        source .venv/bin/activate
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  test-subset:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Create virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip

    - name: Install all dependencies (including Whisper)
      run: |
        source .venv/bin/activate
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock

    - name: Run subset of tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/test_without_whisper.py tests/test_queue_management.py tests/test_configuration.py -v

  integration-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Create virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock

    - name: Run integration tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/test_integration.py tests/test_telegram_handlers.py -v --tb=short

    - name: Test bot import (smoke test)
      run: |
        source .venv/bin/activate
        python -c "
        import sys
        sys.path.append('.')
        try:
            import bot_core
            import main
            print('✅ Bot modules import successfully')
        except Exception as e:
            print(f'❌ Import failed: {e}')
            sys.exit(1)
        "

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install security scanner
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check on dependencies
      run: |
        pip install -r requirements.txt
        safety check --json || echo "Security vulnerabilities found, review required"
      continue-on-error: true

    - name: Run bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || echo "Security issues found, review required"
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json